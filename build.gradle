plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
	jcenter()
	mavenCentral()
	maven { url = "https://www.jitpack.io" }
	maven { url = "https://maven.blamejared.com" }
	maven { url = "https://server.bbkr.space/artifactory/libs-release" }
	maven { url = "https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	modRuntime ("com.lettuce.fudge:notenoughcrashes:${project.not_enough_crashes_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modImplementation ("io.github.prospector:modmenu:${project.mod_menu_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modImplementation ("com.lettuce.fudge:artifice:${project.artifice_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modApi ("me.shedaniel.cloth:config-2:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modImplementation ("vazkii.patchouli:Patchouli:${project.patchouli_version}") { exclude(group: "net.fabricmc.fabric-api") }

	implementation ("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}")
	implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jackson_version}")

	include ("com.fasterxml.jackson.core:jackson-core:${project.jackson_version}")
	include ("com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}")
	include ("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}")
	include ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jackson_version}")
	include ("org.yaml:snakeyaml:${project.snakeyaml_version}")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}